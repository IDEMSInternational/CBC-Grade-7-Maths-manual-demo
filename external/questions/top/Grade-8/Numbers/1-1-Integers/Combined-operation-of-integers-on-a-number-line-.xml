<?xml version="1.0" encoding="UTF-8"?>
<quiz>
  <question type="stack">
    <name>
      <text>Combined operation of integers on a number line.</text>
    </name>
    <questiontext format="moodle_auto_format">
      <text><![CDATA[<p>Using the number line, work out:  \(({@first_number@}) - ({@second_number@}) + ({@third_number@})\).</p>
<p>Drag the green point to the final result on the number line.</p>

[[jsxgraph input-ref-ans1='ans1Ref']]
    var board = JXG.JSXGraph.initBoard(divid, {
        boundingbox: [-12, 1, 12, -1],  
        keepaspectratio: true, 
        showCopyright: false, 
        axis: false,
        showNavigation:true

    });
    const axis = board.create('line', [[-10.5, 0], [10.5, 0]], { 
        straightFirst: false,
        straightLast: false,
        strokeWidth: 2,
        strokeColor: 'black',
        firstArrow:true,
        lastArrow:true,
        fixed: true
    });
    for (let x = -10; x <= 10; x++) {
        board.create('line', [[x, 0.25], [x, -0.25]], {
            strokeWidth: 1,
            strokeColor: 'black',
            straightFirst: false,
            straightLast: false,
            fixed: true
        });
        board.create('text', [x, -0.35, x.toString()], {
            anchorX: 'middle',
            anchorY: 'top',
            fontSize: 12,
            fixed: true
        });
    }
 var point1 = board.create('point', [{#circle_false_pos#}, 0], {
        name: '',
        size: 5,
        fixed: false, 
        strokeColor: 'green',
        fillColor: 'green', 
        attractors: [axis],
        attractorDistance: 1000.0,
        snapToGrid: true,
        snapSizeX: 1,
        snapSizeY: 1
    });
stack_jxg.bind_point(ans1Ref, point1);
board.update();

[[/jsxgraph]]
<p style='display:none'>[[input:ans1]] [[validation:ans1]]</p> [[feedback:prt1]]]]></text>
    </questiontext>
    <generalfeedback format="moodle_auto_format">
      <text><![CDATA[<h3>Worked solution</h3>
<p> From \({#first_number#}\) on the number line move \({#step1#}\) {@stepmessage@} to the {@direction1@}, because we are subtracting a {@sign1@} integer.</p>
<p>From \({@two_addition@}\) on the number line move \({#step2#}\) {@stepmessage1@} to the {@direction2@}, because we are adding a {@sign2@} integer.</p>
[[jsxgraph]]
    var board = JXG.JSXGraph.initBoard(divid, {
        boundingbox: [-12, 1, 12, -1],  
        keepaspectratio: true, 
        showCopyright: false, 
        axis: false,
        showNavigation:true
    });

    const axis = board.create('line', [[-10.5, 0], [10.5, 0]], { 
        straightFirst: false,
        straightLast: false,
        strokeWidth: 2,
        strokeColor: 'black',
        firstArrow:true,
        lastArrow:true,
        fixed: true
    });
    for (let x = -10; x <= 10; x++) {
        board.create('line', [[x, 0.25], [x, -0.25]], {
            strokeWidth: 1,
            strokeColor: 'black',
            straightFirst: false,
            straightLast: false,
            fixed: true
        });
        board.create('text', [x, -0.35, x.toString()], {
            anchorX: 'middle',
            anchorY: 'top',
            fontSize: 12,
            fixed: true
        });
    }
 var point1 = board.create('point', [{#ta#}, 0], {
        name: '',
        size: 2,
        fixed: false, 
        strokeColor: 'green',
        fillColor: 'green', 
        attractors: [axis],
        attractorDistance: 1000.0,
        snapToGrid: true,
        snapSizeX: 1,
        snapSizeY: 1
    });

     if ({#second_number#} > 0) {
          for (let i = 0; i < {#step1#}; i++) {
        board.create('curve', [
            function(t) { return {#first_number#} - i - t; }, 
            function(t) { return 1 - 4*(t-0.5)*(t-0.5); },  // Parabolic curve
            0, 1
        ], {
            strokeColor: 'red',
            strokeWidth: 2,
            lastArrow: {
                type: 2,
                size: 6
            },
            fixed: true
        });
    }
      } else {
           for (let i = 0; i < {#step1#}; i++) {
        board.create('curve', [
            function(t) { return {#first_number#} + i + t; }, 
            function(t) { return 1 - 4*(t-0.5)*(t-0.5); },  // Parabolic curve
            0, 1
        ], {
            strokeColor: 'red',
            strokeWidth: 2,
            lastArrow: {
                type: 2,
                size: 6
            },
            fixed: true
        });
    }
       }

     if ({#third_number#} < 0) {
          for (let i = 0; i < {#step2#}; i++) {
        board.create('curve', [
            function(t) { return {#two_addition#} - i - t; }, 
            function(t) { return 1 - 4*(t-0.5)*(t-0.5); },  // Parabolic curve
            0, 1
        ], {
            strokeColor: 'black',
            strokeWidth: 2,
            lastArrow: {
                type: 2,
                size: 6
            },
            fixed: true
        });
    }
      } else {
           for (let i = 0; i < {#step2#}; i++) {
        board.create('curve', [
            function(t) { return {#two_addition#} + i + t; }, 
            function(t) { return 1 - 3*(t-0.5)*(t-0.5); },  // Parabolic curve
            0, 1
        ], {
            strokeColor: 'black',
            strokeWidth: 2,
            lastArrow: {
                type: 2,
                size: 6
            },
            fixed: true
        });
    }
       }
[[/jsxgraph]]]]></text>
    </generalfeedback>
    <defaultgrade>1</defaultgrade>
    <penalty>0.1</penalty>
    <hidden>0</hidden>
    <idnumber/>
    <stackversion>
      <text>2025012100</text>
    </stackversion>
    <questionvariables>
      <text><![CDATA[first_number:rand_with_prohib(-5,5,[0]);
second_number:rand_with_prohib(-5,5,[first_number,0]);
third_number:rand_with_prohib(-5,5,[first_number,second_number,0]);

two_addition:first_number-second_number;
ta:first_number-second_number+third_number;
circle_false_pos:rand_with_prohib(-5,5,[first_number,second_number,third_number,ta]);

step1:abs(second_number);
if step1 = 1 then stepmessage:"step" else stepmessage:"steps";
if second_number > 0 then (direction1:"left",sign1:"positive") else (direction1:"right",sign1:"negative");

step2:abs(third_number);
if step2 = 1 then stepmessage1:"step" else stepmessage1:"steps";
if third_number < 0 then (direction2:"left",sign2:"negative") else (direction2:"right",sign2:"positive");
]]></text>
    </questionvariables>
    <specificfeedback format="html">
      <text/>
    </specificfeedback>
    <questionnote format="html">
      <text><![CDATA[<p>First integer: \({@first_number@}\)</p>
<p>Second integer: \({@second_number@}\)</p>
<p>Third integer: \({@third_number@}\)</p>
<p>\({@ta@}\)</p>]]></text>
    </questionnote>
    <questiondescription format="html">
      <text><![CDATA[<p id= "author">Daniel Murunga</p>
<p id= "concept"></p>
<p id= "reviewer"></p>
<p id= "reviewer"></p>
<p id="description">This question involves performing both addition and subtraction of integers using the number line.</p>]]></text>
    </questiondescription>
    <questionsimplify>1</questionsimplify>
    <assumepositive>0</assumepositive>
    <assumereal>0</assumereal>
    <prtcorrect format="html">
      <text><![CDATA[<span style="font-size: 1.5em; color:green;"><i class="fa fa-check"></i></span> Correct answer, well done.]]></text>
    </prtcorrect>
    <prtpartiallycorrect format="html">
      <text><![CDATA[<span style="font-size: 1.5em; color:orange;"><i class="fa fa-adjust"></i></span> Your answer is partially correct.]]></text>
    </prtpartiallycorrect>
    <prtincorrect format="html">
      <text><![CDATA[<span style="font-size: 1.5em; color:red;"><i class="fa fa-times"></i></span> Incorrect answer.]]></text>
    </prtincorrect>
    <decimals>.</decimals>
    <scientificnotation>*10</scientificnotation>
    <multiplicationsign>none</multiplicationsign>
    <sqrtsign>1</sqrtsign>
    <complexno>i</complexno>
    <inversetrig>cos-1</inversetrig>
    <logicsymbol>lang</logicsymbol>
    <matrixparens>[</matrixparens>
    <variantsselectionseed/>
    <input>
      <name>ans1</name>
      <type>algebraic</type>
      <tans>ta</tans>
      <boxsize>6</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>0</insertstars>
      <syntaxhint/>
      <syntaxattribute>0</syntaxattribute>
      <forbidwords/>
      <allowwords/>
      <forbidfloat>0</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>1</mustverify>
      <showvalidation>3</showvalidation>
      <options/>
    </input>
    <prt>
      <name>prt1</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>1</feedbackstyle>
      <feedbackvariables>
        <text/>
      </feedbackvariables>
      <node>
        <name>0</name>
        <description>Checks for the correct result after applying both addition and subtraction of integers.</description>
        <answertest>NumAbsolute</answertest>
        <sans>ans1[1]</sans>
        <tans>ta</tans>
        <testoptions>0.05</testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1</truescore>
        <truepenalty/>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt1-1-T</trueanswernote>
        <truefeedback format="html">
          <text/>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty/>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>prt1-1-F</falseanswernote>
        <falsefeedback format="html">
          <text/>
        </falsefeedback>
      </node>
    </prt>
  </question>
</quiz>
