<?xml version="1.0" encoding="UTF-8"?>
<quiz>
  <question type="stack">
    <name>
      <text>Illustrating simple inequalities on a number line.</text>
    </name>
    <questiontext format="moodle_auto_format">
      <text><![CDATA[<p>Illustrate the following inequalities on a number line \({@var_letter@} < {@var_number@}\). </p>
[[jsxgraph input-ref-ans1='ans1Ref' input-ref-ans2='ans2Ref' input-ref-ans_oc='ans_ocRef']]
    var board = JXG.JSXGraph.initBoard(divid, {
        boundingbox: [-10, 10, 12, -10],  
        keepaspectratio: true, 
        showCopyright: true, 
        axis: false,
        showNavigation:true

    });
    const axis = board.create('line', [[-8.5, 0], [10.5, 0]], { 
        straightFirst: false,
        straightLast: false,
        strokeWidth: 2,
        strokeColor: 'black',
        firstArrow:true,
        lastArrow:true,
        fixed: true
    });
    for (let x = -8; x <= 10; x++) {
        board.create('line', [[x, 0.25], [x, -0.25]], {
            strokeWidth: 1,
            strokeColor: 'black',
            straightFirst: false,
            straightLast: false,
            fixed: true
        });
        board.create('text', [x, -0.35, x.toString()], {
            anchorX: 'middle',
            anchorY: 'top',
            fontSize: 12,
            fixed: true
        });
    }
    var point2 = board.create('point', [-1, 0.25], {
        name: '',
        size: 5,
        fixed: false, 
        color: 'green',
        strokeOpacity: 0,
        fillOpacity: 0,
        highlightStrokeOpacity: 0.1,
        highlightFillOpacity: 0.1,
        attractors: [axis],
        attractorDistance: 1000.0,
        snapToGrid: true,
        snapSizeX: 0.5,
        snapSizeY: 0.5
    });

    var point1 = board.create('point', [1.77, 0.25], {
        name: '',
        size: 5,
        fixed: false, 
        strokeColor: 'green',
        fillColor: 'green',
        fillOpacity: 0.0,
    });

    /* Create the range line connecting the two points*/
    var rangeLine = board.create('line', [point2, point1], {
        straightFirst: false,
        straightLast: false,
        strokeWidth: 2,
        strokeColor: 'green',
        firstArrow: true
    });

    /* Update the range line when either endpoint is dragged */
    /* Note: This code can be delete, because this update happens automatically. */
    point1.on('drag', function() {
        rangeLine.setPosition([point2, point1]);
    });
    point2.on('drag', function() {
        rangeLine.setPosition([point2, point1]);
    });

    /* Toggle whether the point is filled or not when clicking on it */
    point1.on('down', function(){
        point1.setAttribute({
                        fillOpacity:1.0-point1.getAttribute('fillOpacity'),  // change to 0 if the old value is 1, and change to 1 if the old value is 0
                    });
    });

    let oc_serializer = function() {return point1.getAttribute('fillOpacity')};
    let oc_deserializer = function(value) {point1.setAttribute({fillOpacity:value})};
    stack_jxg.custom_bind(ans_ocRef, oc_serializer, oc_deserializer, [point1]);
stack_jxg.bind_point(ans1Ref, point1);
stack_jxg.bind_point(ans2Ref, point2);
board.update();

[[/jsxgraph]]

<p style='display:none'>[[input:ans1]] [[validation:ans1]]</p> [[feedback:prt1]]
<p style='display:none'>[[input:ans2]] [[validation:ans2]]</p> [[feedback:prt2]]
[[input:ans_oc]] [[validation:ans_oc]] [[feedback:prt_oc]]]]></text>
    </questiontext>
    <generalfeedback format="moodle_auto_format">
      <text/>
    </generalfeedback>
    <defaultgrade>1</defaultgrade>
    <penalty>0.1</penalty>
    <hidden>0</hidden>
    <idnumber/>
    <stackversion>
      <text>2023060500</text>
    </stackversion>
    <questionvariables>
      <text>var_letter:rand([x,y,k,w,r]);
var_number:rand(10)+2;
ta1: [var_number, 0];
ta2: [var_number-1, 0];
ta_oc: 0; /* 0 means open/unfilled, 1 means closed/filled */</text>
    </questionvariables>
    <specificfeedback format="html">
      <text/>
    </specificfeedback>
    <questionnote format="moodle_auto_format">
      <text><![CDATA[<p>{@var_number@}</p>]]></text>
    </questionnote>
    <questiondescription format="html">
      <text/>
    </questiondescription>
    <questionsimplify>1</questionsimplify>
    <assumepositive>0</assumepositive>
    <assumereal>0</assumereal>
    <prtcorrect format="html">
      <text><![CDATA[<span style="font-size: 1.5em; color:green;"><i class="fa fa-check"></i></span> Correct answer, well done.]]></text>
    </prtcorrect>
    <prtpartiallycorrect format="html">
      <text><![CDATA[<span style="font-size: 1.5em; color:orange;"><i class="fa fa-adjust"></i></span> Your answer is partially correct.]]></text>
    </prtpartiallycorrect>
    <prtincorrect format="html">
      <text><![CDATA[<span style="font-size: 1.5em; color:red;"><i class="fa fa-times"></i></span> Incorrect answer.]]></text>
    </prtincorrect>
    <decimals>.</decimals>
    <scientificnotation>*10</scientificnotation>
    <multiplicationsign>none</multiplicationsign>
    <sqrtsign>1</sqrtsign>
    <complexno>i</complexno>
    <inversetrig>cos-1</inversetrig>
    <logicsymbol>lang</logicsymbol>
    <matrixparens>[</matrixparens>
    <variantsselectionseed/>
    <input>
      <name>ans_oc</name>
      <type>algebraic</type>
      <tans>ta_oc</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>0</insertstars>
      <syntaxhint/>
      <syntaxattribute>0</syntaxattribute>
      <forbidwords/>
      <allowwords/>
      <forbidfloat>1</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>0</mustverify>
      <showvalidation>0</showvalidation>
      <options/>
    </input>
    <input>
      <name>ans1</name>
      <type>algebraic</type>
      <tans>ta1</tans>
      <boxsize>20</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>0</insertstars>
      <syntaxhint/>
      <syntaxattribute>0</syntaxattribute>
      <forbidwords/>
      <allowwords/>
      <forbidfloat>0</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>0</mustverify>
      <showvalidation>0</showvalidation>
      <options/>
    </input>
    <input>
      <name>ans2</name>
      <type>algebraic</type>
      <tans>ta2</tans>
      <boxsize>15</boxsize>
      <strictsyntax>1</strictsyntax>
      <insertstars>0</insertstars>
      <syntaxhint/>
      <syntaxattribute>0</syntaxattribute>
      <forbidwords/>
      <allowwords/>
      <forbidfloat>0</forbidfloat>
      <requirelowestterms>0</requirelowestterms>
      <checkanswertype>0</checkanswertype>
      <mustverify>0</mustverify>
      <showvalidation>0</showvalidation>
      <options/>
    </input>
    <prt>
      <name>prt_oc</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>1</feedbackstyle>
      <feedbackvariables>
        <text/>
      </feedbackvariables>
      <node>
        <name>0</name>
        <description/>
        <answertest>AlgEquiv</answertest>
        <sans>ans_oc</sans>
        <tans>ta_oc</tans>
        <testoptions/>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1</truescore>
        <truepenalty/>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt_oc-1-T</trueanswernote>
        <truefeedback format="html">
          <text/>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty/>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>prt_oc-1-F</falseanswernote>
        <falsefeedback format="html">
          <text/>
        </falsefeedback>
      </node>
    </prt>
    <prt>
      <name>prt1</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>1</feedbackstyle>
      <feedbackvariables>
        <text/>
      </feedbackvariables>
      <node>
        <name>0</name>
        <description/>
        <answertest>NumAbsolute</answertest>
        <sans>ans1</sans>
        <tans>ta1</tans>
        <testoptions>0.1</testoptions>
        <quiet>0</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1</truescore>
        <truepenalty/>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt1-1-T</trueanswernote>
        <truefeedback format="html">
          <text/>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty/>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>prt1-1-F</falseanswernote>
        <falsefeedback format="html">
          <text/>
        </falsefeedback>
      </node>
    </prt>
    <prt>
      <name>prt2</name>
      <value>1.0000000</value>
      <autosimplify>1</autosimplify>
      <feedbackstyle>1</feedbackstyle>
      <feedbackvariables>
        <text><![CDATA[x_diff: ans1[1]-ans2[1]; /* Distance of the x coordinate of the two points*/
is_pointing_left: is(x_diff >= 0);  /* True if the arrow is point left, false otherwise*/]]></text>
      </feedbackvariables>
      <node>
        <name>0</name>
        <description/>
        <answertest>AlgEquiv</answertest>
        <sans>is_pointing_left</sans>
        <tans>true</tans>
        <testoptions/>
        <quiet>1</quiet>
        <truescoremode>=</truescoremode>
        <truescore>1</truescore>
        <truepenalty/>
        <truenextnode>-1</truenextnode>
        <trueanswernote>prt2-1-T</trueanswernote>
        <truefeedback format="html">
          <text/>
        </truefeedback>
        <falsescoremode>=</falsescoremode>
        <falsescore>0</falsescore>
        <falsepenalty/>
        <falsenextnode>-1</falsenextnode>
        <falseanswernote>prt2-1-F</falseanswernote>
        <falsefeedback format="html">
          <text>Your arrow is pointing in the wrong direction.</text>
        </falsefeedback>
      </node>
    </prt>
  </question>
</quiz>
